{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAoBhD,OACI,mCACA,sBAAMC,SAdW,SAACC,GAEdA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAOP,GAAP,mBAAuBO,OAC1CN,EAAe,MAOvB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAnBpB,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,e,+BCPnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,mGAEqFC,UAAWH,IAFhG,SAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAClC,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,4BAAIA,QCAHO,EAAU,SAAC,GAAmB,IAAhBnB,EAAe,EAAfA,SAAe,ECHd,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEGqB,EDN0BK,CAAc1B,GAAlCa,EAVyB,EAU9BN,KAAaa,EAViB,EAUjBA,QAGrB,OACI,qCACC,6BAAMpB,IACJoB,GAAW,wCACd,qBAAKJ,UAAU,YAAf,SAGYH,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEQA,GADGA,EAAIC,aExBxBgB,EAAe,WAAM,MAIMzC,mBAAS,CAAC,cAJhB,mBAIvB0C,EAJuB,KAIX3C,EAJW,KAa9B,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEAA,SAAaA,GADLA,Y,MCtB/B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.9e58e0c8.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n            //prevenir el comportamiento por defecto del formulario es e.preventDefault();\r\n            e.preventDefault();\r\n            //adiciono al array\r\n\r\n            if (inputValue.trim().length > 2 ){\r\n                setCategories( cats => [  inputValue , ...cats]);\r\n                setInputValue ('');\r\n            }\r\n            \r\n            \r\n    }\r\n    return (\r\n        <>\r\n        <form onSubmit={handleSubmit}> \r\n            <input type=\"text\" value={inputValue} onChange={ handleInputChange}>\r\n            </input>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category ) => {\r\n        \r\n    const url= `https://api.giphy.com/v1/gifs/search?api_key=KaBtKaOqAmG23osAcWHEcFccvTOTb68U&limit=10&q=${ encodeURI( category )}`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs;\r\n} ","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={ title }/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n//import React, { useEffect, useState } from 'react'\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category }) => {\r\n\r\n    /* const [images, setImages] = useState([])\r\n    //Funci'on para que el componente solo se renderice una vez\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( setImages )\r\n    }, [ category ]) */\r\n\r\n    //usamos el customhook\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n     \r\n    return (\r\n        <>\r\n         <h3>{ category }</h3>\r\n         { loading && <p>Loading</p>}\r\n        <div className=\"card-grid\">\r\n           \r\n                {\r\n                    images.map( img => (\r\n                      <GifGridItem \r\n                         key = { img.id }\r\n                         { ...img }\r\n                      />\r\n                    ))\r\n                }               \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n  //los edectos no pueden ser async porque esperan algo asincrono\r\n    useEffect( () => {\r\n        \r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs, \r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [category])\r\n     \r\n    return state; //{data:[], loading: true};\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n   // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    \r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    /* const handleAdd = () => {\r\n        //cuando usamos setcategories le estamos cayendo encima al estado anterior y esta creando un nuevo estado asi no se agrega elementos al array\r\n        //por eso utiizamos el operador spread ... y a;adimos la nueva categoria\r\n        //setCategories( [...categories,'HunterxHunter'] );\r\n        setCategories( cats => [ ...cats, 'HunterXHunter']);\r\n\r\n    } */\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }></AddCategory>\r\n            <hr/>\r\n            \r\n            <ol>\r\n                {\r\n                    categories.map( category => \r\n                       <GifGrid \r\n                       key = { category}\r\n                       category = { category }\r\n                       />\r\n                    )\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}